# -*- coding: utf-8 -*-
"""ChatGPT Prompt Engineering for Developers

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aRz1h6CK1x8lPmrXbhwOA0mm3suntSLa
"""
from typing import Any, List, Generator

# Imports and the like

# !mkdir python-chatgpt
# !cd python-chatgpt
# !pip install openai
import openai
from openai.openai_object import OpenAIObject

import CGPTkey

# import os
# !pip install dotenv
# from dotenv import load_dotenv

openai.api_key = CGPTkey.getkey()  # I stored my key in a module that is ignored by my Git repository.
# model_engine = "text-davinci-003"
model = "gpt-3.5-turbo"


def get_completion(cgpt_prompt: str, cgpt_model="gpt-3.5-turbo"):
    messages = [{"role": "user", "content": cgpt_prompt}]
    cgpt_response: Generator[list[Any] | OpenAIObject | dict | Any, Any, None] | list[Any] | OpenAIObject | dict | Any = openai.ChatCompletion.create(
        model=cgpt_model,
        messages=messages,
        temperature=0,  # this is the degree of randomness of the model's output
    )
    return cgpt_response.choices[0].message["content"]


text = f"""
You should express what you want a model to do by \
providing instructions that are as clear and \
specific as you can possibly make them. \
This will guide the model towards the desired output, \
and reduce the chances of receiving irrelevant \
or incorrect responses. Don't confuse writing a \
clear prompt with writing a short prompt. \
In many cases, longer prompts provide more clarity \
and context for the model, which can lead to \
more detailed and relevant outputs.
"""
prompt = f"""
Summarize the text delimited by triple backticks \
into a single sentence.
```{text}```
"""
response = get_completion(prompt)
print(response)

prompt = f"""
Generate a list of three made-up book titles along \
with their authors and genres.
Provide them in JSON format with the following keys:
book_id, title, author, genre.
"""
response = get_completion(prompt)
print(response)
